stages:
  - build
  - test
  - release
  - deploy

variables:
  # GitLab
  DOCKER_DRIVER: overlay2
  BOT_CONTAINER_TEST_IMAGE: registry.gitlab.com/holyshit/homura-discord/bot:$CI_COMMIT_REF_NAME
  BOT_CONTAINER_RELEASE_IMAGE: registry.gitlab.com/holyshit/homura-discord/bot:$CI_COMMIT_SHA
  BOT_CONTAINER_LATEST_IMAGE: registry.gitlab.com/holyshit/homura-discord/bot:latest
  WEB_CONTAINER_TEST_IMAGE: registry.gitlab.com/holyshit/homura-discord/backend:$CI_COMMIT_REF_NAME
  WEB_CONTAINER_RELEASE_IMAGE: registry.gitlab.com/holyshit/homura-discord/backend:$CI_COMMIT_SHA
  WEB_CONTAINER_LATEST_IMAGE: registry.gitlab.com/holyshit/homura-discord/backend:latest
  # Configure postgres service (https://hub.docker.com/_/postgres/)
  POSTGRES_DB: cidatabase
  POSTGRES_USER: ciuser
  POSTGRES_PASSWORD: citest
  POSTGRES_URL: "postgres://$POSTGRES_USER:$POSTGRES_PASSWORD@postgres/$POSTGRES_DB"
  # App Redis
  REDIS_HOST: redis
  REDIS_PORT: 6379

build-bot:
  image: docker:latest
  services:
    - docker:dind
  stage: build
  script:
    - docker pull $BOT_CONTAINER_TEST_IMAGE || true
    - docker build --pull --force-rm --cache-from $BOT_CONTAINER_TEST_IMAGE -t $BOT_CONTAINER_TEST_IMAGE bot/
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN registry.gitlab.com
    - docker push $BOT_CONTAINER_TEST_IMAGE

build-web:
  image: docker:latest
  services:
    - docker:dind
  stage: build
  script:
    - docker pull $WEB_CONTAINER_TEST_IMAGE || true
    - docker build --pull --force-rm --cache-from $WEB_CONTAINER_TEST_IMAGE -t $WEB_CONTAINER_TEST_IMAGE backend/
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN registry.gitlab.com
    - docker push $WEB_CONTAINER_TEST_IMAGE

test-bot:
  image: $BOT_CONTAINER_TEST_IMAGE
  services:
    - docker:dind
  stage: test
  services:
    - redis
  script:
    - pytest --cov=homura -v bot/tests/

release-image:
  image: docker:latest
  services:
    - docker:dind
  stage: release
  script:
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN registry.gitlab.com
    # Push bot
    - docker pull $BOT_CONTAINER_TEST_IMAGE
    - docker tag $BOT_CONTAINER_TEST_IMAGE $BOT_CONTAINER_RELEASE_IMAGE
    - docker tag $BOT_CONTAINER_TEST_IMAGE $BOT_CONTAINER_LATEST_IMAGE
    - docker push $BOT_CONTAINER_RELEASE_IMAGE
    - docker push $BOT_CONTAINER_LATEST_IMAGE
    # Push web
    - docker pull $WEB_CONTAINER_TEST_IMAGE
    - docker tag $WEB_CONTAINER_TEST_IMAGE $WEB_CONTAINER_RELEASE_IMAGE
    - docker tag $WEB_CONTAINER_TEST_IMAGE $WEB_CONTAINER_LATEST_IMAGE
    - docker push $WEB_CONTAINER_RELEASE_IMAGE
    - docker push $WEB_CONTAINER_LATEST_IMAGE
  only:
    - master

deploy:
  image:
    name: docker:latest
    entrypoint: [""]
  stage: deploy
  environment:
    name: production
  script:
    - cat swarm-compose-prod.yml | sed "s/_IMAGE_HASH_/$CI_COMMIT_SHA/" | docker stack deploy --compose-file - homura-discord
  tags:
    - deploy
  only:
    - master
    